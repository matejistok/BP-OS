{
  "nav": {
    "virtualMemory": "Virtual Memory",
    "fileSystem": "File System",
    "fileSystemIndirect": "File System Indirect",
    "fileSystemDindirect": "File System Double Indirect",
    "fileSystemSize": "File System Size",
    "mmap": "MMAP"
  },
  "help": "Help",
  "arrows": "Arrows",
  "virtualAddress": "Virtual Address",
  "virtualAddressHelp": "Virtual Address: Shows the structure of a virtual address. Click on L2, L1, L0 to change page table levels, and on index fields to navigate through the page tables.",
  "pageDirectory1": "Level 2 Page Directory: The first level of page tables that maps virtual addresses to the next level. Click on PPN1 to change the physical address of the next level.",
  "pageDirectory2": "Level 1 Page Directory: The second level of page tables that further translates the virtual address. Click on PPN2 to change the physical address of the next level.",
  "pageDirectory3": "Level 0 Page Directory: The final level of page tables that maps to actual physical memory pages. Click on PPN3 to set the physical page number.",
  "physicalAddress": "Physical Address: The final translated memory address consisting of the page number (PPN3) and the offset within the page.",
  "virtualMemorySpace": "Virtual Memory Space: Shows the total addressable memory space. The size changes based on the page table levels (L2, L1, L0) configured.",
  "satp": "SATP Register: Contains the physical address of the root page table (Level 2). It's the starting point for address translation.",
  "arrowsHelp": "Arrows: Toggle this to visualize how the address translation flows through the page tables.",
  "pageDirectory": "Page Directory",
  "address": "Address",
  "flags": "Flags",
  "physicalAddressTitle": "Physical Address",
  "virtualMemorySpaceTitle": "Virtual Address Space",
  "usableVA": "Usable Space",
  "mb": "MB",
  "gb": "GB",
  "valueErrorNumber": "Value must be a number from 0 to 9.",
  "valueErrorRange": "Value must be a number from 0 to",
  "valueErrorHex": "Value must be a valid hexadecimal number.",
  "valueErrorHexRange": "Value must be a hexadecimal number not exceeding FFFF.",
  "l0DependencyError": "L0 can be size 0 only when both L2 and L1 are size 0.",
  "l1DependencyError": "L1 can be size 0 only when L2 is size 0.",
  "size": "Size"
}
